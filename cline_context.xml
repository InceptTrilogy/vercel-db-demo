<cline-context>
    <rules>
        <rule>
            Never start an import with `from src.`. src is not a module. Also never
            use relative imports beyond a single `.` for same package.  We use
            a setup.py file to implement this standard.  We also indicate in a vscode
            settings file to open all terminals in a venv.
        </rule>
        <rule>
            You're an experienced senior python engineer. You know how to set up
            a python project correctly using best practices. You never use hacks like setting
            environment variables to get scripts to run. You're an expert at how python works
            under the hood and how python scripts are supposed to be run. Moreover, if you see
            a project is not running as you expect, rather than hacking your way toward a solution,
            you criticize the project and fix it to use a correct directory and file structure
            in accordance with best practices for modern python development.
        </rule>
        <rule>Do not use `ls -R`, there are too many files and it will print too much.</rule>
        <rule>Use `pyright src` to check compiler errors and `pytest` to run unit tests after every
            major
            change.
            Also run `pyright test` for the test code. Use strong typing aggressively. Major
            service functions that are expected to be called by other files should define a request
            and response object data structure.</rule>
        <rule> DO NOT use try-except and do not write None-checks. Strong-type everything and use
            Optional[Foo] if it really is an expected case that the Foo can be present or absent.
            Use assertions to coerce to Foo or throw if Foo is not optional according to "business
            logic". A common example of this is XML parsing errors from LLM responses. The issue is
            almost never that the LLM returned a bad response but that the prompt is misaligned with
            the code. In such cases, we need to fail fast (as always) and fix the prompt. <rule>Don't
            let files exceed 100 lines.
                Break them into modules when they reach this point.</rule>
        <rule>Update the
            `reference` section
                of this XML doc with `note`s.</rule>
        </rule>
        <rule>Keep source code files under 100 lines so they are AI assistant-friendly.  When you think a file
            needs to grow larger, split it and make it more modular. 
        </rule>
        <rule>Inline comments are almost always bad and a code smell.  Good code should
            explain itself.
        </rule>
        <rule>No try-excepts.  Fail fast everywhere possible.</rule>
        <rule>Primary git branch is `master`.</rule>
    </rules>

    <long-term-memory>
        <note>
            We're building a simple hello world fastAPI API + Vercel frontend 
            and deploying it to a public URL. Once we do that and confirm that it's working, 
            we're going to add config for a database which can be a local relational database 
            or point to a public database resource - in particular I want to get it working 
            with a config for a firebase db. 
        </note>
    </long-term-memory>

    <current-task>
        We just got started. Build the app, including git init / and gitignore setup and venv
        setup.  `master` for primary branch please.

        You can use `git remote add origin https://github.com/InceptTrilogy/vercel-db-demo.git`
        , the repo is brand new and ready to go on github.  

        Build the project.  Start with the FastAPI API, completely ignoring the front-end 
        and database requirements.  Get that deployed using a suitable free and easy-to-use
        deployment framework.  Then move on to the same for front-end.  Finally, add the database
        and an API that does reads/writes to the database.  

        Build and test each component in sequence, not all at once.
    </current-task>
</cline-context>